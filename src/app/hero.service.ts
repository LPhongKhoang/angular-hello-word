import { Injectable } from '@angular/core';

import { Observable, of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';

import { Hero } from './hero';
import { HEROES } from './mock-heroes';
import { MessageService } from './message.service';
import { HttpClient, HttpHeaders } from '@angular/common/http';


// We use HttpClient for interacting with API
// API expects a special headere in HTTP save requests
const httpOptions = {
  headers: new HttpHeaders({ 'Content-Type': 'applicatino/json'})
};  

@Injectable({
  providedIn: 'root',
})
export class HeroService {

  // define the heroesUrl with the address of the heroes resource on the server (mock)
  private heroesUrl = "api/heroes";
  constructor(private http: HttpClient,
    private messageService: MessageService) { }

  getHeroes(): Observable<Hero[]> {
    // TODO: send the message _after_ fetching the heroes
    // this.messageService.add('HeroService: fetched heroes');
    // return of(HEROES);

    // convert code above to use HttpClient
    return this.http.get<Hero[]>(this.heroesUrl)
      .pipe(
        tap(heroes => this.log('fetched heroes')),
        catchError(this.handleError('getHeroes', []))
      );
  }

  findHero(id: number): Observable<Hero> {
    this.messageService.add(`HeroService: fetch Hero has id = ${id}`);
    return of(HEROES.find(h => h.id === id));
  }

  getHero(id: number): Observable<Hero> {
    const url = `${this.heroesUrl}/${id}`;
    return this.http.get<Hero>(url)
      .pipe(
        tap(_ => this.log(`fetch hero id=${id}`)),
        catchError(this.handleError<Hero>(`getHero id=${id}`, { id: 0, name: 'Unknow' }))
      );
  }

  updateHero(hero: Hero) {
    return this.http.put(this.heroesUrl, hero, httpOptions)
        .pipe(
          tap(_ => this.log(`update hero id=${hero.id}`)),
          catchError(this.handleError('updateHero'))
        );
  }

  addHero(hero: Hero){
    return this.http.post<Hero>(this.heroesUrl, hero, httpOptions)
        .pipe(
          tap((hero: Hero) => this.log(`add new hero id=${hero.id} (id is generated by SERVER)`)),
          catchError(this.handleError<Hero>('addHero'))
        );
  }

  deleteHero(hero: Hero): Observable<Hero> {
    
    const id = hero.id;    
    const url = `${this.heroesUrl}/${id}`;
    return this.http.delete<Hero>(url, httpOptions)
      .pipe(
        tap (_ => this.log(`delete Hero id = ${id}`)),
        catchError(this.handleError<Hero>("delete Hero"))
      );
  }

  searchHeroes(term: string) : Observable<Hero[]>{
    if (!term.trim()) {
      // if not search item, return empty hero array
      return of([]);
    }

    // request via http
    // url includes query string
    const url = `${this.heroesUrl}/?name=${term}`;
    return this.http.get<Hero[]>(url)
      .pipe(
        tap(_ => this.log(`found heroes matching "${term}"`)),
        catchError(this.handleError<Hero[]>('search Heroes', []))
      );
  }
  
  // Log a HeroService message with the MessageService 
  private log(message: string) {
    this.messageService.add(`HeroService: ${message}`);
  }

  /**
 * Handle Http operation that failed.
 * Let the app continue.
 * @param operation - name of the operation that failed
 * @param result - optional value to return as the observable result
 */
  private handleError<T>(operation = 'operation', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error(error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }
}


/*
Copyright 2017-2018 Google Inc. All Rights Reserved.
Use of this source code is governed by an MIT-style license that
can be found in the LICENSE file at http://angular.io/license
*/